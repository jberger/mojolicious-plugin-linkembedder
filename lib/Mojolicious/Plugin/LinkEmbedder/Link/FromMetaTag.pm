package Mojolicious::Plugin::LinkEmbedder::Link::FromMetaTag;

=head1 NAME

Mojolicious::Plugin::LinkEmbedder::Link::FromMetaTag - HTML links which may include meta information

=cut

use Mojo::Base 'Mojolicious::Plugin::LinkEmbedder::Link';

use Mojo::URL;
use Mojo::IOLoop;

=head1 ATTRIBUTES

=head2 dom

Mojo::DOM instance generated by retrieving the url

=cut

has 'dom';

=head2 meta_handler

The meta handler instance used to extract properties from the C<dom>.
It will be an instance of L<Mojolicious::Plugin::LinkEmbedder::Link::Meta> or a subclass thereof.
The default is a trivial base implementation instance.

=cut

has 'meta_handler' => sub { shift->find_meta_handler };

=head2 meta_handler_classes

An arrayref of classes which maybe be tried (in succession) to extract information from the C<dom>.
Each should be a class which inherits from L<Mojolicious::Plugin::LinkEmbedder::Link::Meta> or a subclass thereof.
The last should be a fallback implementation which trivially implements the API.

=cut

has 'meta_handler_classes' => sub {[qw/
  Mojolicious::Plugin::LinkEmbedder::Link::Meta::OpenGraphProtocol
  Mojolicious::Plugin::LinkEmbedder::Link::Meta 
/]};


=head1 METHODS

=head2 find_meta_handler

Traverse the C<meta_handler_classes> to find an appropriate handler class and return an instance.
A C<Mojo::DOM> instance may be passed in; if not provided the C<dom> instance attribute is assumed.

=cut

sub find_meta_handler {
  my ($self, $dom) = @_;
  $dom ||= $self->dom;
  my $classes = $self->meta_handler_classes;
  for my $class (@$classes) {
    eval "require $class; 1" or next;
    my $handler = $class->new( dom => $dom );
    return $handler if $handler->handled;
  }
}


=head2 learn

  $self->learn($cb, @cb_args);

This method can be used to learn more information about the link. This class
has no idea what to learn, so it simply calls the callback (C<$cb>) with
C<@cb_args>.

=cut

sub learn {
  my ($self, $cb, @cb_args) = @_;
  my $ua = $self->{ua};
  my $delay = Mojo::IOLoop->delay(
    sub {
      my $delay = shift;
      $ua->get($self->url, $delay->begin);
    },
    sub {
      my ($delay, $tx) = @_;
      my $dom = $tx->res->dom;
      if ($dom) {
        $self->dom($dom);
      }
      $cb->(@cb_args);
    },
  );
  $delay->wait unless $delay->ioloop->is_running;
}

=head2 pretty_url

Returns a pretty version of the L</url> of the resource.
This may be derived from meta infomation.
The default is to return a cloned version of L</url>.

=cut

sub pretty_url { 
  my $self = shift;
  $self->meta_handler->pretty_url || $self->SUPER::pretty_url;
}


=head2 to_embed

Return a best available embedding link, possibly extracted from meta information.

=cut

sub to_embed {
  my $self = shift;
  $self->meta_handler->to_embed || $self->SUPER::to_embed;
}

1;


